#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# Chapter 5: Visualizing data

#!markdown

[Additional resources available online](https://mattonml.net/books/datascience/datavis/)

#!markdown

## Extracting insights with descriptive statistics

#!markdown

### Using DataFrame.Description to generate descriptive statistics

#!fsharp

#r "nuget:Microsoft.Data.Analysis,0.21.1"

open Microsoft.Data.Analysis

let df = DataFrame.LoadCsv("JoinedStats.csv")
df.Head(5)

#!fsharp

df.Columns.Remove("Id")
df.Columns.Remove("club_id")
df.Head(5)

#!fsharp

df.Info()

#!fsharp

df.Description()

#!fsharp

df["market_value_in_eur"].Info()

#!fsharp

df["market_value_in_eur"].Description()

#!fsharp

let sortedValues = df["market_value_in_eur"]    // here we have a SingleDataFrameColumn but we need to convert it to a sequence of single values
                |> Seq.cast<single>             // cast the column to a sequence of single values
                |> Seq.map float                // convert the single values to float (what are the differences between a C# single and an F# float?)
                |> Array.ofSeq                  // convert the sequence to an array
                |> Array.sort                   // sort the array

sortedValues

#!markdown

In summary, float in C# is single-precision, while float in F# is double-precision

#!fsharp

df["market_value_in_eur"].GetType()

#!markdown

### Descriptive statistics with MathNet.Numerics

#!fsharp

#r "nuget:MathNet.Numerics,5.0.0"    // since F# float is a double, MathNet.Numerics is more precise with it than with a C# single

#!fsharp

open MathNet.Numerics.Statistics

#!fsharp

DescriptiveStatistics(sortedValues)

#!markdown

See documentation at https://numerics.mathdotnet.com/DescriptiveStatistics

#!fsharp

SortedArrayStatistics.Median(sortedValues)

#!fsharp

SortedArrayStatistics.LowerQuartile(sortedValues)

#!fsharp

SortedArrayStatistics.UpperQuartile(sortedValues)

#!fsharp

SortedArrayStatistics.Median(sortedValues)

#!fsharp

SortedArrayStatistics.Quantile(sortedValues, 0.25)

#!markdown

## Data Visualization

#!fsharp

#r "nuget:ScottPlot,5.0.37"
#r "nuget:Plotly.NET,5.0.0"
#r "nuget:Plotly.NET.Interactive,5.0.0"

#!markdown

When running on Linux you may require this additional dependency

#!fsharp

// #r "nuget:SkiaSharp.NativeAssets.Linux.NoDependencies"

#!fsharp

open ScottPlot
open System.IO
open Microsoft.DotNet.Interactive.Formatting

// Setup a custom formatter to display plots as images
Formatter.Register<ScottPlot.Plot>(
    (fun (plot: ScottPlot.Plot) (writer: TextWriter) ->
        writer.Write(plot.GetImageHtml(1000, 400))),
    mimeType = "text/html"
)

#!markdown

## Creating a box plot with ScottPlot

#!fsharp

let plot = new Plot();
plot.Title "Player Market Value Distribution"

plot.Add.Box(new Box(
      WhiskerMax = (sortedValues |> Array.max),
      BoxMax = (sortedValues |> SortedArrayStatistics.UpperQuartile),
      BoxMiddle = (sortedValues |> SortedArrayStatistics.Median),
      BoxMin = (sortedValues |> SortedArrayStatistics.LowerQuartile),
      WhiskerMin = (sortedValues |> Array.min)
))

plot

#!fsharp

sortedValues |> Array.min

#!markdown

## Performing univariate analysis with Plotly.NET

#!fsharp

let marketValues = df["market_value_in_eur"] |> Seq.cast<single>
let positions = df["position"] |> Seq.cast<string>
let clubs = df["club_name"] |> Seq.cast<string>
let goals = df["goals"] |> Seq.cast<single>
let assists = df["assists"] |> Seq.cast<single>
let minutesPerGame = df["minutes_played"] |> Seq.cast<single>
let playerNames = df["name"] |> Seq.cast<string>
let redCards = df["red_cards"] |> Seq.cast<single>

#!markdown

### Box plots in Plotly.NET

#!fsharp

open Plotly.NET

Chart.BoxPlot(Y = marketValues)
    |> Chart.withTitle "Player Market Value Distribution"
    |> Chart.withTraceInfo "Market Value"
    |> Chart.withSize(300, 400)

#!fsharp

Chart.BoxPlot(X = marketValues, MultiText=playerNames)
    |> Chart.withTitle "Player Market Value Distribution"
    |> Chart.withTraceInfo "Market Value"
    |> Chart.withSize(400, 300)

#!fsharp

Chart.BoxPlot(X = marketValues, 
              BoxPoints = StyleParam.BoxPoints.All, 
              MultiText=playerNames,
              Jitter=0.35)
    |> Chart.withTitle "Player Market Value Distribution"
    |> Chart.withTraceInfo "Market Value"
    |> Chart.withSize(500, 350)

#!markdown

### Violin plots with Plotly.NET

#!fsharp

Chart.Violin(X = marketValues)
    |> Chart.withTitle "Player Market Value Distribution"
    |> Chart.withTraceInfo "Market Value"
    |> Chart.withSize(600, 350)

#!fsharp

Chart.Violin(X = marketValues, Points = StyleParam.JitterPoints.All)
    |> Chart.withTitle "Player Market Value Distribution"
    |> Chart.withTraceInfo "Market Value"
    |> Chart.withSize(600, 350)

#!markdown

### Histograms with Plotly.NET

#!fsharp

Chart.Histogram(X = marketValues)
    |> Chart.withTitle "Player Market Value Distribution"
    |> Chart.withSize(500, 300)

#!fsharp

Chart.Histogram(X = marketValues, NBinsX=50)
    |> Chart.withTitle "Player Market Value Distribution"
    |> Chart.withSize(500, 300)

#!fsharp

Chart.Histogram(X = marketValues, NBinsX=150)
    |> Chart.withTitle "Player Market Value Distribution"
    |> Chart.withSize(500, 300)

#!markdown

## Multivariate Analysis

#!markdown

### Univariate Plots with multiple dimensions

#!fsharp

Chart.BoxPlot(Y = marketValues, X = positions)
    |> Chart.withTitle "Player Market Value Distribution by Position"
    |> Chart.withSize(500, 350)

#!fsharp

Chart.Violin(Y = marketValues, X = positions)
    |> Chart.withTitle "Player Market Value Distribution by Position"
    |> Chart.withSize(500, 350)

#!fsharp

Chart.BoxPlot(Y = minutesPerGame, X = positions)
    |> Chart.withTitle "Playtime by Position"
    |> Chart.withSize(500, 350)

#!fsharp

Chart.BoxPlot(Y = marketValues, X = clubs, MultiText=playerNames)
    |> Chart.withTitle "Market Value by Club"
    |> Chart.withSize(700, 400)

#!fsharp

Chart.BoxPlot(Y = goals, X = clubs, MultiText=playerNames)
    |> Chart.withTitle "Goals per game by Club"
    |> Chart.withSize(700, 400)

#!markdown

### Scatter Plot

#!fsharp

Chart.Point(x = goals, 
            y = minutesPerGame,
            MultiText = playerNames)
    |> Chart.withTitle "Goals per Game vs Minutes per Game"
    |> Chart.withXAxisStyle(TitleText = "Goals per Game")
    |> Chart.withYAxisStyle(TitleText = "Minutes per Game")

#!fsharp

Chart.Point(x = minutesPerGame, 
            y = marketValues,
            MultiText = playerNames)
    |> Chart.withTitle "Market Valuation vs Playtime"
    |> Chart.withSize(600, 400)    
    |> Chart.withXAxisStyle(TitleText = "Minutes per Game")
    |> Chart.withYAxisStyle(TitleText = "Market Valuation")

#!fsharp

Chart.Point(x = goals, 
            y = assists,
            MultiText = playerNames)
    |> Chart.withTitle "Goals vs Assists Per Game"
    |> Chart.withSize(400, 400)    
    |> Chart.withXAxisStyle(TitleText = "Goals", MinMax=(0,2))
    |> Chart.withYAxisStyle(TitleText = "Assists", MinMax=(0,2))

#!fsharp

Chart.Point(x = goals, 
            y = assists,
            MultiText = playerNames,
            MarkerColor = (Color.fromColorScaleValues minutesPerGame))
    |> Chart.withTitle "Goals vs Assists Colorized by Play Time"
    |> Chart.withSize(400, 400)    
    |> Chart.withXAxisStyle(TitleText = "Goals", MinMax=(-0.1,1.6))
    |> Chart.withYAxisStyle(TitleText = "Assists", MinMax=(-0.1,1.6))
    |> Chart.withMarkerStyle(ShowScale = true)

#!fsharp

Chart.Point(x = goals, 
            y = assists,
            MultiText = playerNames,
            MarkerColor = (Color.fromColorScaleValues marketValues))
    |> Chart.withTitle "Goals vs Assists Colorized by Valuation"
    |> Chart.withSize(400, 400)    
    |> Chart.withXAxisStyle(TitleText = "Goals", MinMax=(-0.1,1.6))
    |> Chart.withYAxisStyle(TitleText = "Assists", MinMax=(-0.1,1.6))
    |> Chart.withMarkerStyle(ShowScale = true)

#!fsharp

Chart.Point3D(x = goals, 
              y = assists, 
              z = marketValues, 
              MultiText = playerNames,
              MarkerColor = (Color.fromColorScaleValues marketValues))
    |> Chart.withTitle "Goals vs Assists vs Valuation"
    |> Chart.withXAxisStyle(TitleText = "Goals", Id = StyleParam.SubPlotId.Scene 1)
    |> Chart.withYAxisStyle(TitleText = "Assists", Id = StyleParam.SubPlotId.Scene 1)
    |> Chart.withZAxisStyle(TitleText = "MarketValue")
    |> Chart.withSize (800, 600)

#!fsharp

Chart.Point3D(x = goals, 
              y = assists, 
              z = marketValues, 
              MultiText = playerNames,
              MarkerColor = (Color.fromColorScaleValues minutesPerGame))
    |> Chart.withTitle "Goals vs Assists vs Valuation"
    |> Chart.withXAxisStyle(TitleText = "Goals", Id = StyleParam.SubPlotId.Scene 1)
    |> Chart.withYAxisStyle(TitleText = "Assists", Id = StyleParam.SubPlotId.Scene 1)
    |> Chart.withZAxisStyle(TitleText = "MarketValue")
    |> Chart.withSize (800, 600)

#!markdown

### Correlation Matrix

#!fsharp

Correlation.Pearson(goals |> Seq.map float, 
                    assists |> Seq.map float)

#!fsharp

Correlation.Pearson(assists |> Seq.map float, 
                    redCards |> Seq.map float)

#!fsharp

df.Columns 
    |> Seq.map (fun col -> col.Name) 
    |> Array.ofSeq

#!fsharp

let columnsToAnalyze = 
    df.Columns 
    |> Seq.filter (fun col -> col.GetType() =typeof<SingleDataFrameColumn>)
    |> Seq.map (fun col -> col.Name)
    |> Array.ofSeq

let numColumns = Array.length columnsToAnalyze

columnsToAnalyze

#!fsharp

let results : float[][] = Array.zeroCreate numColumns
for y = 0 to numColumns - 1 do
    let colY = df[columnsToAnalyze[y]] 
                |> Seq.cast<single> 
                |> Seq.map float
    let rowResults : float[] = Array.create numColumns nan
    results.[y] <- rowResults

    for x = 0 to y do
        let colX = df[columnsToAnalyze[x]]
                        |> Seq.cast<single> 
                        |> Seq.map float
        rowResults.[x] <- Correlation.Pearson(colX, colY)

results

#!fsharp

Chart.Heatmap(zData=results, 
            ReverseYAxis=true,
            X=columnsToAnalyze,
            Y=columnsToAnalyze)
    |> Chart.withTitle "Correlation Matrix"

#!markdown

## More complex version
Function-oriented and supports boolean columns as well

#!fsharp

let IdentifyColumnsToAnalyze (df: DataFrame) =
    df.Columns 
    |> Seq.filter (fun col ->
            let t = col.GetType()
            t = typeof<SingleDataFrameColumn> || t = typeof<PrimitiveDataFrameColumn<bool>>
        )
    |> Seq.map (fun col -> col.Name)
    |> Array.ofSeq

#!fsharp

let getSingleFromBool (input: Nullable<bool>): single =
    match input.HasValue with
        | false -> 0f
        | true -> 
            match input.Value with
            | true -> 1.0f
            | false -> 0.0f

let getColumnValue( df: DataFrame, colName: string) : float seq =
    match df.Columns.[colName] with
    | :? SingleDataFrameColumn as singleCol ->
        singleCol 
        |> Seq.cast<single> 
        |> Seq.map float
    | :? PrimitiveDataFrameColumn<bool> as boolCol ->
        boolCol
        |> Seq.map getSingleFromBool
        |> Seq.map float
    | _ -> // Expand to support additional types as needed
        Seq.empty<float>

#!fsharp

let buildCorrelationMatrix (df: DataFrame) =
    // Figure out what columns we're analyzing
    let columnsToAnalyze = df |> IdentifyColumnsToAnalyze
    let numColumns = Array.length columnsToAnalyze
    
    // Build a jagged array containing the correlation results
    let results : float[][] = Array.zeroCreate numColumns
    for y = 0 to numColumns - 1 do
        let colY = getColumnValue(df, columnsToAnalyze[y])
        let rowResults : float[] = Array.create numColumns nan
        results.[y] <- rowResults

        for x = 0 to y do
            let colX = getColumnValue(df, columnsToAnalyze[x])
            rowResults.[x] <- Correlation.Pearson(colX, colY)
    
    // Return a tuple with the results and the columns analyzed
    results, columnsToAnalyze

#!fsharp

let results, correlationColumns = buildCorrelationMatrix(df)
results

#!fsharp

let plotCorrelationMatrix (correlationMatrix, correlationColumns) =
    Chart.Heatmap(zData=correlationMatrix, 
                ReverseYAxis=true,
                X=correlationColumns,
                Y=correlationColumns)
        |> Chart.withTitle "Correlation Matrix"

df 
|> buildCorrelationMatrix 
|> plotCorrelationMatrix
|> Chart.withTitle "Feature Correlations for Football Players"

#!fsharp

// This shows that age and BirthYear are inversely correlated. Let's remove BirthYear
df.Columns.Remove("BirthYear")

#!markdown

## One Hot Encoding
Let's add some boolean columns

#!fsharp

let oneHotEncodeColumn (df: DataFrame, column: StringDataFrameColumn) =
    let values = column |> Seq.distinct

    for v in values do
        df["Is " + v + "?"] <- column.ElementwiseEquals(v)

#!fsharp

// Let's add some columns for positions
oneHotEncodeColumn(df, df["position"] :?> StringDataFrameColumn)

#!fsharp

// Let's re-render
df 
|> buildCorrelationMatrix 
|> plotCorrelationMatrix
|> Chart.withTitle "Feature Correlations for Football Players"

#!fsharp

// Let's add some columns for sub-positions
oneHotEncodeColumn(df, df["sub_position"] :?> StringDataFrameColumn)

#!fsharp

// Let's re-render
df 
|> buildCorrelationMatrix 
|> plotCorrelationMatrix
|> Chart.withTitle "Feature Correlations for Football Players"

#!markdown

## Additional Resources
[Additional resources available online](https://mattonml.net/books/datascience/datavis/)
